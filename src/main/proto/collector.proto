syntax = "proto3";

option go_package = "github.com/utmstack/UTMStack/agent-manager/agent";
import "common.proto";

package agent;

service CollectorService {
  rpc RegisterCollector(RegisterRequest) returns (AuthResponse) {}
  rpc DeleteCollector(DeleteRequest) returns (AuthResponse) {}
  rpc ListCollector (ListRequest) returns (ListCollectorResponse) {}
  rpc CollectorStream(stream CollectorMessages) returns (stream CollectorMessages) {}
  rpc GetCollectorConfig (ConfigRequest) returns (CollectorConfig) {}
}

service PanelCollectorService {
  rpc RegisterCollectorConfig(CollectorConfig) returns (ConfigKnowledge) {}
}

enum CollectorModule{
  AS_400 = 0;
}

message RegisterRequest {
  string ip = 1;
  string hostname = 2;
  string version = 3;
  CollectorModule collector = 4;
}

message ListCollectorResponse {
  repeated Collector rows = 1;
  int32 total = 2;
}

message Collector {
  int32 id = 1;
  Status status = 2;
  string collector_key = 3;
  string ip = 4;
  string hostname = 5;
  string version = 6;
  CollectorModule module = 7;
  string last_seen = 8;
}

message CollectorMessages {
  oneof stream_message {
    CollectorConfig config = 1;
    ConfigKnowledge result = 2;
  }
}

message CollectorConfig {
  string collector_id = 1;
  repeated CollectorConfigGroup groups = 2;
  string request_id = 3;
}

message CollectorConfigGroup {
  int32 id = 1;
  string group_name = 2;
  string group_description = 3;
  repeated CollectorGroupConfigurations configurations = 4;
  int32 collector_id = 5;
}

message CollectorGroupConfigurations {
  int32 id = 1;
  int32 group_id = 2;
  string conf_key = 3;
  string conf_value = 4;
  string conf_name = 5;
  string conf_description = 6;
  string conf_data_type = 7;
  bool conf_required = 8;
}

message ConfigKnowledge{
  string accepted = 1;
  string request_id = 2;
}

message ConfigRequest {
  CollectorModule module = 1;
}
